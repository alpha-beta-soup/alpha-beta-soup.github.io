{"data":{"site":{"siteMetadata":{"title":"Spatial Paralysis","author":"Richard Law"}},"markdownRemark":{"id":"580d1247-7b5a-5ffe-8e59-ab2340c3a1db","excerpt":"Bill Dollins has a  downright useful tutorial  over on his blog for building a straightforward geodata service with Node, Express…","html":"<p>Bill Dollins has a <a href=\"http://blog.geomusings.com/2013/12/11/building-a-simple-geodata-service-with-node-and-amazon-rds/\">downright useful tutorial</a> over on his blog for building a straightforward geodata service with Node, Express, PostgreSQL and Amazon RDS.</p>\n<p>I’m actually surprised at how few of these sorts of server applications actually exist, given that they’re reasonably straightforward to set up, and marvelous to use. A project I’ve been working on recently at work consists of a WebSocket server (using ws4py) that operates as an aggregator for real-time spatial data from a variety of sources (also implemented as WebSockets). Connecting to it is as simple as <code class=\"language-text\">wss://host:port/api-version/service</code> and then valid GeoJSON gets pushed to the browser. I don’t think I can say much about the project, but I can say it has transformed how I see the delivery of spatial data over the Internet for time-critical applications. I’d love it if the NZTA got around to implementing something like this for its traffic alert APIs.</p>\n<p>I also have the beginnings of a QGIS plugin that connects to a specified WebSocket and will render arriving messages, provided they come as GeoJSON.</p>","frontmatter":{"title":"Geodata web services","date":"09:04 PM, Saturday January 16, 2016","updated":null,"path":null},"fields":{"slug":"/geodata-web-services/"}}},"pageContext":{"slug":"/geodata-web-services/","previous":{"fields":{"slug":"/gis-se-improvement-tip-1/"},"frontmatter":{"title":"GIS StackExchange Improvement Tip #1","updated":null,"date":"2018-12-10T18:04:00.000Z","path":"/blog/gis-se-improvement-tip-1","tags":["stackexchange"]}},"next":null}}